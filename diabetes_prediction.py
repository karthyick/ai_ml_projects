# -*- coding: utf-8 -*-
"""Diabetes Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y2-y8C98ykr5p5-dQ8j1C6g6Gq66LcjT

Import dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and analysis"""

diabetes_dataset = pd.read_csv('/content/diabetes.csv')

"""Display top 5 records"""

diabetes_dataset.head()

diabetes_dataset.shape

diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""0 ----->> Non-diabetes
1 ----->> diabetes
"""

diabetes_dataset.groupby('Outcome').mean()

# Seperating data and labels

X = diabetes_dataset.drop(columns = 'Outcome', axis = 1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)



"""Data preprocessing"""

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify = Y, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

"""Train the model"""

classifier = svm.SVC(kernel = 'linear')

#training the Support vector machine classifier

classifier.fit(X_train, Y_train)

"""Model Evaluation"""



"""Finding the accuracy score"""

X_train_accuracy = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_accuracy, Y_train)

print('Accuracy score of training data --', training_data_accuracy)

X_test_accuracy = classifier.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_accuracy, Y_test)
print('Accuracy score of the training data : ', testing_data_accuracy)



"""Making predective system"""

input_data = (1,189,60,23,846,30.1,0.398,59)

input_data_as_numpy_array = np.asarray(input_data)

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#standandize the data

std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

print(prediction)

input_data = (1,85,66,29,0,26.6,0.351,31)

input_data_as_numpy_array = np.asarray(input_data)

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#standandize the data

std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if(prediction[0]== 0):
   print('the person is not diabetic')
else:
   print('the person is diabetic')

